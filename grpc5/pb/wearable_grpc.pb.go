// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: pb/wearable.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WearableServiceClient is the client API for WearableService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WearableServiceClient interface {
	BeatsPerSecond(ctx context.Context, in *BeatsPerSecondRequest, opts ...grpc.CallOption) (WearableService_BeatsPerSecondClient, error)
}

type wearableServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWearableServiceClient(cc grpc.ClientConnInterface) WearableServiceClient {
	return &wearableServiceClient{cc}
}

func (c *wearableServiceClient) BeatsPerSecond(ctx context.Context, in *BeatsPerSecondRequest, opts ...grpc.CallOption) (WearableService_BeatsPerSecondClient, error) {
	stream, err := c.cc.NewStream(ctx, &WearableService_ServiceDesc.Streams[0], "/proto.WearableService/BeatsPerSecond", opts...)
	if err != nil {
		return nil, err
	}
	x := &wearableServiceBeatsPerSecondClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WearableService_BeatsPerSecondClient interface {
	Recv() (*BeatsPerSecondResponse, error)
	grpc.ClientStream
}

type wearableServiceBeatsPerSecondClient struct {
	grpc.ClientStream
}

func (x *wearableServiceBeatsPerSecondClient) Recv() (*BeatsPerSecondResponse, error) {
	m := new(BeatsPerSecondResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WearableServiceServer is the server API for WearableService service.
// All implementations must embed UnimplementedWearableServiceServer
// for forward compatibility
type WearableServiceServer interface {
	BeatsPerSecond(*BeatsPerSecondRequest, WearableService_BeatsPerSecondServer) error
	mustEmbedUnimplementedWearableServiceServer()
}

// UnimplementedWearableServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWearableServiceServer struct {
}

func (UnimplementedWearableServiceServer) BeatsPerSecond(*BeatsPerSecondRequest, WearableService_BeatsPerSecondServer) error {
	return status.Errorf(codes.Unimplemented, "method BeatsPerSecond not implemented")
}
func (UnimplementedWearableServiceServer) mustEmbedUnimplementedWearableServiceServer() {}

// UnsafeWearableServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WearableServiceServer will
// result in compilation errors.
type UnsafeWearableServiceServer interface {
	mustEmbedUnimplementedWearableServiceServer()
}

func RegisterWearableServiceServer(s grpc.ServiceRegistrar, srv WearableServiceServer) {
	s.RegisterService(&WearableService_ServiceDesc, srv)
}

func _WearableService_BeatsPerSecond_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BeatsPerSecondRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WearableServiceServer).BeatsPerSecond(m, &wearableServiceBeatsPerSecondServer{stream})
}

type WearableService_BeatsPerSecondServer interface {
	Send(*BeatsPerSecondResponse) error
	grpc.ServerStream
}

type wearableServiceBeatsPerSecondServer struct {
	grpc.ServerStream
}

func (x *wearableServiceBeatsPerSecondServer) Send(m *BeatsPerSecondResponse) error {
	return x.ServerStream.SendMsg(m)
}

// WearableService_ServiceDesc is the grpc.ServiceDesc for WearableService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WearableService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.WearableService",
	HandlerType: (*WearableServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BeatsPerSecond",
			Handler:       _WearableService_BeatsPerSecond_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/wearable.proto",
}
